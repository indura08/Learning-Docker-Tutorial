🐳 What is a Docker Compose file?
===================================

Docker Compose is a tool that lets you define and run multi-container Docker applications with just one YAML file — typically called docker-compose.yml.

Instead of running many separate docker run commands for each container (backend, frontend, database...), Docker Compose lets you declare all of them in one place.

📄 Example: What does a docker-compose.yml look like?
========================================================

version: '3.8'

services:
  backend:
    image: my-spring-app
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"

  mysql:
    image: mysql:8
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: mydb
    ports:
      - "3306:3306"

In this example:

One container runs your Spring Boot app

One container runs a MySQL database

Docker Compose connects them automatically

✅ What are the uses of Docker Compose?
===============================================

🔄 Run multiple services (backend + DB + frontend...) with a single command:

docker-compose up

📦 Define builds and environments in one YAML file.

🛠️ Easier local development — no need to run lots of commands or scripts.

🔗 Automatically handles networking between containers.



| ✅ Pros                       | 🔍 Explanation                                      |
| ---------------------------- | --------------------------------------------------- |
| Easy multi-container setup   | Define all containers in one file                   |
| One command to rule them all | `docker-compose up` starts everything               |
| Environment management       | Define `env` variables per service                  |
| Built-in networking          | Services can talk to each other using service names |
| Portable setup               | Share one file, and anyone can run the same app     |


| ❌ Cons                       | 😬 Why it might be a problem                         |
| ---------------------------- | ---------------------------------------------------- |
| Not ideal for production     | For production, tools like Kubernetes are better     |
| More overhead for small apps | Overkill if you're just running one container        |
| Limited orchestration        | Can't auto-restart dead containers, auto-scale, etc. |
| Requires Docker installed    | All team members need Docker + Compose               |


